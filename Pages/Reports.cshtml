@page
@using Microsoft.AspNetCore.Html
@{
    ViewData["Title"] = "Reports";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2><i class="fas fa-chart-bar me-2 text-primary"></i>Analytics & Reports</h2>
            <div class="btn-group">
                <button class="btn btn-success" onclick="exportToExcel()">
                    <i class="fas fa-file-excel me-1"></i> Export Excel
                </button>
                <button class="btn btn-outline-primary" onclick="refreshData()">
                    <i class="fas fa-sync-alt me-1"></i> Refresh
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Live Data Dashboard (shown when service is running) -->
<div class="card border-success mb-4" id="liveDataCard" style="display: none;">
    <div class="card-header bg-success text-white">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="card-title mb-0">
                <i class="fas fa-broadcast-tower me-2"></i>Live Data Feed
                <span class="badge bg-light text-success ms-2" id="liveDataStatus">Connected</span>
            </h5>
            <div class="d-flex align-items-center">
                <small class="me-3" id="lastUpdate">Last update: --</small>
                <button class="btn btn-sm btn-outline-light" onclick="toggleLiveData()" id="liveToggleBtn">
                    <i class="fas fa-pause me-1"></i> Pause
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="d-flex align-items-center">
                    <div class="bg-primary rounded p-2 me-3">
                        <i class="fas fa-clock text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0" id="liveRequestsPerHour">0</h6>
                        <small class="text-muted">Requests/Hour</small>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="d-flex align-items-center">
                    <div class="bg-success rounded p-2 me-3">
                        <i class="fas fa-check text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0" id="liveSuccessRate">0%</h6>
                        <small class="text-muted">Success Rate (24h)</small>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="d-flex align-items-center">
                    <div class="bg-warning rounded p-2 me-3">
                        <i class="fas fa-tachometer-alt text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0" id="liveAvgResponse">0ms</h6>
                        <small class="text-muted">Avg Response Time</small>
                    </div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
                <div class="d-flex align-items-center">
                    <div class="bg-info rounded p-2 me-3">
                        <i class="fas fa-memory text-white"></i>
                    </div>
                    <div>
                        <h6 class="mb-0" id="systemMemory">0 MB</h6>
                        <small class="text-muted">Memory Usage</small>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Recent Activity Stream -->
        <div class="mt-3">
            <h6 class="border-bottom pb-2 mb-3">
                <i class="fas fa-stream me-2"></i>Recent Activity
                <span class="badge bg-secondary ms-2" id="activityCount">0</span>
            </h6>
            <div id="recentActivity" class="" style="max-height: 200px; overflow-y: auto;">
                <div class="text-center text-muted py-3">
                    <small>No recent activity</small>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Summary Dashboard -->
<div class="row mb-4">
    <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
        <div class="card border-primary h-100">
            <div class="card-body text-center">
                <i class="fas fa-database text-primary fa-3x mb-3"></i>
                <h4 class="text-primary" id="totalScenarios">0</h4>
                <p class="text-muted mb-0">Total Scenarios</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
        <div class="card border-success h-100">
            <div class="card-body text-center">
                <i class="fas fa-play-circle text-success fa-3x mb-3"></i>
                <h4 class="text-success" id="totalApiTests">0</h4>
                <p class="text-muted mb-0">API Tests Run</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
        <div class="card border-info h-100">
            <div class="card-body text-center">
                <i class="fas fa-cogs text-info fa-3x mb-3"></i>
                <h4 class="text-info" id="totalConfigurations">0</h4>
                <p class="text-muted mb-0">Configurations</p>
            </div>
        </div>
    </div>
    <div class="col-xl-3 col-lg-6 col-md-6 mb-3">
        <div class="card border-warning h-100">
            <div class="card-body text-center">
                <i class="fas fa-clock text-warning fa-3x mb-3"></i>
                <h4 class="text-warning" id="avgResponseTime">0ms</h4>
                <p class="text-muted mb-0">Avg Response</p>
            </div>
        </div>
    </div>
</div>

<!-- Filters and Controls -->
<div class="card mb-4">
    <div class="card-header">
        <h5 class="card-title mb-0">
            <i class="fas fa-filter me-2"></i>Report Filters & Controls
        </h5>
    </div>
    <div class="card-body">
        <div class="row g-3">
            <div class="col-lg-3 col-md-6">
                <label class="form-label fw-semibold">Report Type</label>
                <select id="reportType" class="form-select">
                    <option value="scenarios">Generated Scenarios</option>
                    <option value="test-results">API Test Results</option>
                    <option value="configurations">Configuration Analytics</option>
                    <option value="comparative">Comparative Analysis</option>
                </select>
            </div>
            <div class="col-lg-3 col-md-6">
                <label class="form-label fw-semibold">Configuration</label>
                <select id="configurationFilter" class="form-select">
                    <option value="">All Configurations</option>
                </select>
            </div>
            <div class="col-lg-3 col-md-6">
                <label class="form-label fw-semibold">Risk Level</label>
                <select id="riskLevelFilter" class="form-select">
                    <option value="">All Risk Levels</option>
                    <option value="low">Low Risk (1-3)</option>
                    <option value="medium">Medium Risk (4-6)</option>
                    <option value="high">High Risk (7-10)</option>
                </select>
            </div>
            <div class="col-lg-3 col-md-6">
                <label class="form-label fw-semibold">Date Range</label>
                <select id="dateRangeFilter" class="form-select">
                    <option value="today">Today</option>
                    <option value="week">Past Week</option>
                    <option value="month" selected>Past Month</option>
                    <option value="quarter">Past Quarter</option>
                    <option value="all">All Time</option>
                    <option value="custom">Custom Range</option>
                </select>
            </div>
        </div>
        
        <!-- Custom Date Range (hidden by default) -->
        <div class="row mt-3" id="customDateRange" style="display: none;">
            <div class="col-md-6">
                <label class="form-label fw-semibold">Start Date</label>
                <input type="datetime-local" id="customStartDate" class="form-control">
            </div>
            <div class="col-md-6">
                <label class="form-label fw-semibold">End Date</label>
                <input type="datetime-local" id="customEndDate" class="form-control">
            </div>
        </div>
        
        <div class="row mt-3">
            <div class="col-12">
                <button id="generateReportBtn" class="btn btn-primary me-2">
                    <i class="fas fa-chart-line me-1"></i> Generate Report
                </button>
                <button id="compareConfigs" class="btn btn-outline-secondary me-2">
                    <i class="fas fa-balance-scale me-1"></i> Compare Configurations
                </button>
                <button class="btn btn-outline-info" onclick="scheduleReport()">
                    <i class="fas fa-calendar me-1"></i> Schedule Report
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Charts Section -->
<div class="card mb-4 shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">
            <i class="fas fa-chart-pie me-2 text-info"></i>Performance Analytics
        </h5>
        <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-secondary" onclick="refreshCharts()">
                <i class="fas fa-sync-alt"></i> Refresh Charts
            </button>
            <button class="btn btn-outline-secondary" onclick="exportCharts()">
                <i class="fas fa-image"></i> Export Charts
            </button>
        </div>
    </div>
    <div class="card-body">
        <!-- Row 1: Primary Performance Metrics -->
        <div class="row">
            <!-- Success Rate Chart with Better Design -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-check-circle text-success me-2"></i>API Success Rate
                        </h6>
                        <div class="badge bg-primary text-white" id="successRateMetric">0%</div>
                    </div>
                    <canvas id="successRateChart" width="400" height="250"></canvas>
                </div>
            </div>
            
            <!-- Response Time Chart Enhanced -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-clock text-warning me-2"></i>Response Time Analysis
                        </h6>
                        <div class="badge bg-warning text-dark" id="avgResponseMetric">0ms</div>
                    </div>
                    <canvas id="responseTimeChart" width="400" height="250"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Row 2: Risk Analysis and Performance Tracking -->
        <div class="row">
            <!-- Risk Level Distribution Enhanced -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-shield-alt text-danger me-2"></i>Risk Level Distribution
                        </h6>
                        <div class="badge bg-info text-white" id="riskMetric">0 scenarios</div>
                    </div>
                    <canvas id="riskLevelChart" width="400" height="250"></canvas>
                </div>
            </div>
            
            <!-- API Performance Timeline Enhanced -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-chart-line text-primary me-2"></i>Performance Timeline (24h)
                        </h6>
                        <div class="badge bg-secondary text-white" id="timelineMetric">0 requests</div>
                    </div>
                    <canvas id="performanceTimelineChart" width="400" height="250"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Row 3: Advanced Analytics Charts -->
        <div class="row">
            <!-- Configuration Performance Comparison -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-cogs text-info me-2"></i>Configuration Performance
                        </h6>
                        <div class="badge bg-info text-white" id="configMetric">0 configs</div>
                    </div>
                    <canvas id="configPerformanceChart" width="400" height="250"></canvas>
                </div>
            </div>
            
            <!-- Error Rate Trends -->
            <div class="col-lg-6 col-md-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-exclamation-circle text-warning me-2"></i>Error Rate Trends
                        </h6>
                        <div class="badge bg-warning text-dark" id="errorMetric">0% errors</div>
                    </div>
                    <canvas id="errorTrendsChart" width="400" height="250"></canvas>
                </div>
            </div>
        </div>
        
        <!-- Row 4: Volume and Activity Analysis -->
        <div class="row">
            <!-- Request Volume Heatmap -->
            <div class="col-12 mb-4">
                <div class="chart-container">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="mb-0">
                            <i class="fas fa-fire text-danger me-2"></i>Request Volume Heatmap (Last 7 Days)
                        </h6>
                        <div class="btn-group btn-group-sm" role="group">
                            <button type="button" class="btn btn-outline-secondary" onclick="setHeatmapView('daily')" id="heatmapDaily">Daily</button>
                            <button type="button" class="btn btn-outline-secondary active" onclick="setHeatmapView('hourly')" id="heatmapHourly">Hourly</button>
                        </div>
                    </div>
                    <canvas id="volumeHeatmapChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Report Content -->
<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">
            <i class="fas fa-table me-2 text-success"></i>Report Data
            <span class="badge bg-success ms-2" id="reportDataCount">0</span>
        </h5>
        <div class="btn-group btn-group-sm">
            <button class="btn btn-outline-secondary" onclick="exportCurrentReport()">
                <i class="fas fa-file-csv"></i> CSV
            </button>
            <button class="btn btn-outline-secondary" onclick="exportToJson()">
                <i class="fas fa-file-code"></i> JSON
            </button>
            <button class="btn btn-outline-secondary" onclick="printReport()">
                <i class="fas fa-print"></i> Print
            </button>
        </div>
    </div>
    <div class="card-body">
        <div id="reportContent">
            <div class="text-center py-5">
                <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">Select filters and click "Generate Report"</h5>
                <p class="text-muted">Choose your report type and parameters above to view detailed analytics.</p>
            </div>
        </div>
    </div>
</div>

<!-- Pagination for Reports -->
<nav id="reportPaginationContainer" class="mt-4" style="display: none;">
    <ul class="pagination justify-content-center" id="reportPagination">
    </ul>
</nav>

<!-- Configuration Comparison Modal -->
<div class="modal fade" id="compareModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-balance-scale me-2"></i>Configuration Comparison
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="comparisonContent">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading comparison...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary" onclick="exportComparison()">
                    <i class="fas fa-download me-1"></i> Export Comparison
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Result Details Modal -->
<div class="modal fade" id="resultModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle me-2"></i>Result Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="resultDetails">
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading details...</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<!-- Chart.js Library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<!-- Reports JavaScript -->
<script src="~/js/reports.js"></script>

<style>
    .report-table {
        font-size: 0.9rem;
    }
    .report-table th {
        background-color: #f8f9fa;
        border-top: 2px solid #007bff;
        font-weight: 600;
        white-space: nowrap;
    }
    .report-table td {
        vertical-align: middle;
    }
    
    /* Fix hover issues - ensure text remains readable */
    .report-table tbody tr {
        transition: background-color 0.2s ease !important;
    }
    
    .report-table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.08) !important;
        cursor: default !important;
    }
    
    .report-table tbody tr:hover td {
        color: inherit !important;
        background-color: transparent !important;
    }
    
    .report-table tbody tr:hover .badge {
        opacity: 1 !important;
        filter: none !important;
    }
    
    .report-table tbody tr:hover code {
        background-color: #f8f9fa !important;
        color: #e83e8c !important;
        opacity: 1 !important;
    }
    
    /* Disable Bootstrap's default table hover if present */
    .table-hover tbody tr:hover td,
    .table-hover tbody tr:hover th {
        background-color: rgba(0, 123, 255, 0.08) !important;
        color: inherit !important;
    }
    .risk-badge {
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
    .performance-meter {
        width: 100%;
        height: 6px;
        background-color: #e9ecef;
        border-radius: 3px;
        overflow: hidden;
    }
    .performance-bar {
        height: 100%;
        transition: width 0.3s ease;
    }
    .performance-excellent { background-color: #28a745; }
    .performance-good { background-color: #ffc107; }
    .performance-poor { background-color: #dc3545; }
    .comparison-card {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        margin-bottom: 15px;
        transition: all 0.2s ease;
    }
    .comparison-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    .chart-container {
        position: relative;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        color: #212529 !important; /* Ensure dark text on light background */
    }
    
    /* Ensure all text in chart containers is readable */
    .chart-container h6,
    .chart-container .badge,
    .chart-container * {
        color: inherit !important;
    }
    
    /* Fix any white text issues */
    .text-white {
        color: #ffffff !important;
    }
    
    /* Ensure proper contrast for badges */
    .badge.bg-light {
        background-color: #f8f9fa !important;
        color: #212529 !important;
        border: 1px solid #dee2e6 !important;
    }
    
    /* Ensure card headers have proper text color */
    .card-header {
        color: #212529 !important;
    }
    
    .card-header h5,
    .card-header .card-title {
        color: #212529 !important;
    }
    .chart-container canvas {
        max-height: 300px;
    }
    .metric-comparison {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #f0f0f0;
    }
    .metric-comparison:last-child {
        border-bottom: none;
    }
    @@media print {
        .btn, .navbar, .modal, .pagination {
            display: none !important;
        }
        .card {
            border: 1px solid #000 !important;
            break-inside: avoid;
        }
    }
</style>

<script>
    // Additional page-specific functionality that extends reports.js
    
    // Handle date range change specific to this page
    function onDateRangeChange() {
        const dateRange = document.getElementById('dateRangeFilter').value;
        const customRange = document.getElementById('customDateRange');
        
        if (dateRange === 'custom') {
            customRange.style.display = 'flex';
        } else {
            customRange.style.display = 'none';
        }
    }
    
    // Additional initialization for this page
    document.addEventListener('DOMContentLoaded', function() {
        // Set up date range change handler
        const dateRangeSelect = document.getElementById('dateRangeFilter');
        if (dateRangeSelect) {
            dateRangeSelect.addEventListener('change', onDateRangeChange);
        }
    });

    // Page-specific report functions that extend reports.js functionality
    // Note: Main functions are in reports.js to avoid conflicts

    // Handle report type change
    function onReportTypeChange() {
        const reportType = document.getElementById('reportType').value;
        // Reset filters and show relevant options based on report type
        if (reportType === 'configurations') {
            document.getElementById('configurationFilter').disabled = true;
            document.getElementById('riskLevelFilter').disabled = true;
        } else {
            document.getElementById('configurationFilter').disabled = false;
            document.getElementById('riskLevelFilter').disabled = reportType === 'configurations';
        }
    }




    // Generate comparative analysis report
    async function generateComparativeReport(dateRange) {
        try {
            const configsResp = await fetch('/api/configuration');
            if (!configsResp.ok) {
                console.error('Configuration API response not OK:', configsResp.status, configsResp.statusText);
                throw new Error(`Failed to fetch configurations: ${configsResp.status}`);
            }
            
            const configs = await configsResp.json();
            
            // Validate configs is an array
            if (!Array.isArray(configs)) {
                console.error('Configurations response is not an array:', configs);
                throw new Error('Invalid configurations data format');
            }
            const comparative = [];
            
            for (const config of configs) {
                try {
                    // For now, fetch all scenarios since ConfigurationId filtering is not working  
                    // TODO: Fix ConfigurationId foreign key relationship
                    const scenariosResp = await fetch(`/api/generations?pageSize=1000&page=1`);
                    let scenarios = [];
                    if (scenariosResp.ok) {
                        const allScenarios = await scenariosResp.json();
                        // Filter by configuration in JavaScript for now
                        scenarios = allScenarios.filter(s => {
                            // Since we don't have proper ConfigurationId relationship,
                            // we'll show all scenarios divided equally among configurations
                            return true; // Show all scenarios for each configuration for now
                        });
                    }
                    
                    // Calculate metrics from GeneratedScenarios
                    const totalRequests = scenarios.length;
                    const testedScenarios = scenarios.filter(s => s.IsTested === true);
                    const successfulTests = scenarios.filter(s => s.TestSuccessful === true);
                    
                    const successRate = testedScenarios.length > 0 ? 
                        Math.round((successfulTests.length / testedScenarios.length) * 100) : 0;
                    
                    const avgResponseTime = scenarios.length > 0 ? 
                        Math.round(scenarios.reduce((sum, s) => sum + (s.ResponseTimeMs || 0), 0) / scenarios.length) : 0;
                    
                    const responseTimes = scenarios.filter(s => s.ResponseTimeMs).map(s => s.ResponseTimeMs);
                    const minResponseTime = responseTimes.length > 0 ? Math.min(...responseTimes) : 0;
                    const maxResponseTime = responseTimes.length > 0 ? Math.max(...responseTimes) : 0;
                    
                    const stats = {
                        totalRequests,
                        successRate,
                        averageResponseTime: avgResponseTime,
                        minResponseTime,
                        maxResponseTime
                    };
                    
                    comparative.push({
                        configuration: config.Name || config.name,
                        endpoint: config.ApiEndpoint || config.apiEndpoint,
                        totalRequests: totalRequests,
                        successRate: successRate,
                        avgResponseTime: avgResponseTime,
                        minResponseTime: minResponseTime,
                        maxResponseTime: maxResponseTime,
                        performance: calculatePerformanceScore(stats)
                    });
                } catch (error) {
                    console.error(`Error in comparative analysis for ${config.Name || config.name}:`, error);
                    // Add config with zero stats on error
                    comparative.push({
                        configuration: config.Name || config.name,
                        endpoint: config.ApiEndpoint || config.apiEndpoint,
                        totalRequests: 0,
                        successRate: 0,
                        avgResponseTime: 0,
                        minResponseTime: 0,
                        maxResponseTime: 0,
                        performance: 0
                    });
                }
            }
            
            return comparative.sort((a, b) => b.performance - a.performance);
        } catch (error) {
            console.error('Error generating comparative report:', error);
            return [];
        }
    }

    // Calculate performance score
    function calculatePerformanceScore(stats) {
        if (!stats || !stats.totalRequests) return 0;
        
        const successWeight = 0.4;
        const speedWeight = 0.3;
        const reliabilityWeight = 0.3;
        
        const successScore = (stats.successRate || 0);
        const speedScore = Math.max(0, 100 - Math.min(100, (stats.averageResponseTime || 1000) / 10));
        const reliabilityScore = Math.min(100, (stats.totalRequests || 0) / 10);
        
        return Math.round(successWeight * successScore + speedWeight * speedScore + reliabilityWeight * reliabilityScore);
    }

    // Render report table
    function renderReportTable(data, reportType) {
        if (data.length === 0) {
            document.getElementById('reportContent').innerHTML = `
                <div class="text-center py-5">
                    <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No data found</h5>
                    <p class="text-muted">Try adjusting your filters or date range.</p>
                </div>
            `;
            document.getElementById('reportDataCount').textContent = '0';
            return;
        }

        let tableHtml = '';
        
        switch (reportType) {
            case 'scenarios':
                tableHtml = renderScenariosTable(data);
                break;
            case 'test-results':
                tableHtml = renderTestResultsTable(data);
                break;
            case 'configurations':
                tableHtml = renderConfigurationsTable(data);
                break;
            case 'comparative':
                tableHtml = renderComparativeTable(data);
                break;
        }
        
        document.getElementById('reportContent').innerHTML = `
            <div class="table-responsive">
                ${tableHtml}
            </div>
        `;
        document.getElementById('reportDataCount').textContent = data.length.toString();
    }

    // Render scenarios table
    function renderScenariosTable(scenarios) {
        return `
            <table class="table table-striped table-hover report-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Created</th>
                        <th>Risk Level</th>
                        <th>User Profile</th>
                        <th>Amount</th>
                        <th>From</th>
                        <th>To</th>
                        <th>Activity</th>
                        <th>Tested</th>
                        <th>Result</th>
                    </tr>
                </thead>
                <tbody>
                    ${scenarios.map(s => `
                        <tr>
                            <td><code>${s.id}</code></td>
                            <td>${s.createdAt}</td>
                            <td>
                                <span class="badge risk-badge bg-${s.riskLevel === 'low' ? 'success' : s.riskLevel === 'medium' ? 'warning' : 'danger'}">
                                    ${s.riskLevel?.toUpperCase() || 'N/A'}
                                </span>
                            </td>
                            <td>${s.userProfile}</td>
                            <td>${s.amount}</td>
                            <td>${s.fromName}</td>
                            <td>${s.toName}</td>
                            <td>${s.activityCode}</td>
                            <td>
                                <span class="badge bg-${s.tested === 'Yes' ? 'info' : 'secondary'}">
                                    ${s.tested}
                                </span>
                            </td>
                            <td>
                                <span class="badge bg-${s.testSuccess === 'Success' ? 'success' : s.testSuccess === 'Failed' ? 'danger' : 'secondary'}">
                                    ${s.testSuccess}
                                </span>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;
    }

    // Render test results table
    function renderTestResultsTable(results) {
        // Check if we have combined data (with scenario info) or just API logs
        const hasCombinedData = results.length > 0 && results[0].scenarioId;
        
        if (hasCombinedData) {
            // Render enhanced table with scenario information
            return `
                <table class="table table-striped table-hover report-table">
                    <thead>
                        <tr>
                            <th>Scenario ID</th>
                            <th>Config ID</th>
                            <th>Timestamp</th>
                            <th>Risk Level</th>
                            <th>Amount</th>
                            <th>Tested</th>
                            <th>Status</th>
                            <th>Code</th>
                            <th>Response Time</th>
                            <th>Error</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${results.map(r => `
                            <tr>
                                <td><code>${r.scenarioId || r.id}</code></td>
                                <td><code>${r.configurationId}</code></td>
                                <td>${r.timestamp}</td>
                                <td>
                                    <span class="badge risk-badge bg-${r.riskLevel === 'low' || r.riskLevel === 'Low' ? 'success' : r.riskLevel === 'medium' || r.riskLevel === 'Medium' ? 'warning' : 'danger'}">
                                        ${r.riskLevel?.toUpperCase() || 'UNKNOWN'}
                                    </span>
                                </td>
                                <td>${r.amount || 'N/A'}</td>
                                <td>
                                    <span class="badge bg-${r.tested === 'Yes' ? 'info' : 'secondary'}">
                                        ${r.tested || 'No'}
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-${r.success === 'Success' ? 'success' : r.success === 'Not Tested' ? 'secondary' : 'danger'}">
                                        ${r.success}
                                    </span>
                                </td>
                                <td><code>${r.statusCode}</code></td>
                                <td>
                                    <span class="badge bg-info">${r.responseTime}</span>
                                </td>
                                <td>
                                    <span class="badge bg-${r.hasError === 'Yes' ? 'warning' : 'success'}">
                                        ${r.hasError}
                                    </span>
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        } else {
            // Render standard API logs table
            return `
                <table class="table table-striped table-hover report-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Config ID</th>
                            <th>Iteration</th>
                            <th>Timestamp</th>
                            <th>Status</th>
                            <th>Code</th>
                            <th>Response Time</th>
                            <th>Has Error</th>
                            <th>Error Message</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${results.map(r => `
                            <tr>
                                <td><code>${r.id}</code></td>
                                <td><code>${r.configurationId}</code></td>
                                <td>${r.iterationNumber || r.id}</td>
                                <td>${r.timestamp}</td>
                                <td>
                                    <span class="badge bg-${r.success === 'Success' ? 'success' : 'danger'}">
                                        ${r.success}
                                    </span>
                                </td>
                                <td><code>${r.statusCode}</code></td>
                                <td>
                                    <span class="badge bg-info">${r.responseTime}</span>
                                </td>
                                <td>
                                    <span class="badge bg-${r.hasError === 'Yes' ? 'warning' : 'success'}">
                                        ${r.hasError}
                                    </span>
                                </td>
                                <td class="text-truncate" style="max-width: 200px;" title="${r.errorMessage}">
                                    ${r.errorMessage}
                                </td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            `;
        }
    }

    // Render configurations table
    function renderConfigurationsTable(configs) {
        return `
            <table class="table table-striped table-hover report-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Endpoint</th>
                        <th>Status</th>
                        <th>Generated</th>
                        <th>Tested</th>
                        <th>Success Rate</th>
                        <th>Avg Response</th>
                        <th>Last Used</th>
                        <th>Created</th>
                    </tr>
                </thead>
                <tbody>
                    ${configs.map(c => {
                        let statusBadge = 'secondary';
                        let statusText = c.status;
                        
                        if (c.status === 'Active & Responding') {
                            statusBadge = 'success';
                        } else if (c.status.startsWith('Error')) {
                            statusBadge = 'danger';
                        } else if (c.status === 'Connection Failed') {
                            statusBadge = 'warning';
                        } else if (c.status === 'Inactive') {
                            statusBadge = 'secondary';
                        }
                        
                        return `
                            <tr>
                                <td><strong>${c.name}</strong></td>
                                <td><code class="text-truncate" style="max-width: 300px;" title="${c.endpoint}">${c.endpoint}</code></td>
                                <td>
                                    <span class="badge bg-${statusBadge}">
                                        ${statusText}
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-info">${c.totalRequests}</span>
                                </td>
                                <td>
                                    <span class="badge bg-primary">${c.testedRequests || 0}</span>
                                </td>
                                <td>
                                    <span class="badge bg-${parseInt(c.successRate) >= 80 ? 'success' : parseInt(c.successRate) >= 50 ? 'warning' : 'danger'}">
                                        ${c.successRate}
                                    </span>
                                </td>
                                <td>
                                    <span class="badge bg-secondary">${c.avgResponseTime}</span>
                                </td>
                                <td class="small">${c.lastUsed}</td>
                                <td class="small">${c.createdAt}</td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
    }

    // Render comparative table
    function renderComparativeTable(comparative) {
        return `
            <table class="table table-striped table-hover report-table">
                <thead>
                    <tr>
                        <th>Rank</th>
                        <th>Configuration</th>
                        <th>Endpoint</th>
                        <th>Requests</th>
                        <th>Success Rate</th>
                        <th>Avg Response</th>
                        <th>Performance</th>
                        <th>Reliability</th>
                    </tr>
                </thead>
                <tbody>
                    ${comparative.map((c, index) => {
                        const perfClass = c.performance >= 70 ? 'excellent' : c.performance >= 40 ? 'good' : 'poor';
                        return `
                            <tr>
                                <td>
                                    <span class="badge bg-${index < 3 ? 'warning' : 'secondary'}">
                                        #${index + 1}
                                    </span>
                                </td>
                                <td><strong>${c.configuration}</strong></td>
                                <td><code class="text-truncate">${c.endpoint}</code></td>
                                <td>${c.totalRequests}</td>
                                <td>
                                    <span class="badge bg-${c.successRate >= 80 ? 'success' : c.successRate >= 50 ? 'warning' : 'danger'}">
                                        ${c.successRate}%
                                    </span>
                                </td>
                                <td>${c.avgResponseTime}ms</td>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="performance-meter me-2" style="width: 60px;">
                                            <div class="performance-bar performance-${perfClass}" style="width: ${c.performance}%"></div>
                                        </div>
                                        <span class="small">${c.performance}%</span>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-${c.totalRequests >= 100 ? 'success' : c.totalRequests >= 20 ? 'warning' : 'danger'}">
                                        ${c.totalRequests >= 100 ? 'High' : c.totalRequests >= 20 ? 'Medium' : 'Low'}
                                    </span>
                                </td>
                            </tr>
                        `;
                    }).join('')}
                </tbody>
            </table>
        `;
    }

    // Show loading state
    function showLoadingState() {
        document.getElementById('reportContent').innerHTML = `
            <div class="text-center py-5">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Generating report...</span>
                </div>
                <p class="text-muted">Generating report...</p>
            </div>
        `;
    }

    // Show error state
    function showErrorState(message) {
        document.getElementById('reportContent').innerHTML = `
            <div class="alert alert-danger">
                <i class="fas fa-exclamation-triangle me-2"></i>
                ${message}
            </div>
        `;
    }

    // Show comparison modal
    async function showComparisonModal() {
        const modal = new bootstrap.Modal(document.getElementById('compareModal'));
        modal.show();
        
        try {
            const comparative = await generateComparativeReport('month');
            renderComparisonView(comparative);
        } catch (error) {
            document.getElementById('comparisonContent').innerHTML = `
                <div class="alert alert-danger">
                    Failed to load comparison data: ${error.message}
                </div>
            `;
        }
    }

    // Render comparison view
    function renderComparisonView(comparative) {
        const html = `
            <div class="row">
                ${comparative.map((config, index) => `
                    <div class="col-md-6 col-lg-4 mb-3">
                        <div class="comparison-card">
                            <div class="card-header bg-${index < 3 ? 'warning' : 'light'} text-${index < 3 ? 'dark' : 'muted'}">
                                <h6 class="mb-0">
                                    ${index < 3 ? `<i class="fas fa-trophy me-1"></i>` : ''}
                                    #${index + 1} ${config.configuration}
                                </h6>
                            </div>
                            <div class="card-body">
                                <div class="metric-comparison">
                                    <span>Success Rate</span>
                                    <span class="badge bg-${config.successRate >= 80 ? 'success' : config.successRate >= 50 ? 'warning' : 'danger'}">
                                        ${config.successRate}%
                                    </span>
                                </div>
                                <div class="metric-comparison">
                                    <span>Avg Response</span>
                                    <span class="badge bg-info">${config.avgResponseTime}ms</span>
                                </div>
                                <div class="metric-comparison">
                                    <span>Total Requests</span>
                                    <span class="badge bg-secondary">${config.totalRequests}</span>
                                </div>
                                <div class="metric-comparison">
                                    <span>Performance Score</span>
                                    <span class="badge bg-primary">${config.performance}%</span>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
        
        document.getElementById('comparisonContent').innerHTML = html;
    }

    // Export to Excel
    async function exportToExcel() {
        if (currentReportData.length === 0) {
            showToast('No data to export. Generate a report first.', 'error');
            return;
        }
        
        // Create Excel-compatible CSV
        const reportType = document.getElementById('reportType').value;
        const filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}.csv`;
        
        const headers = Object.keys(currentReportData[0]);
        const csvContent = [
            headers.join(','),
            ...currentReportData.map(row => 
                headers.map(header => {
                    const value = row[header] || '';
                    return `"${String(value).replace(/"/g, '""')}"`;
                }).join(',')
            )
        ].join('\n');
        
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showToast('Excel file exported successfully!');
    }

    // Export current report
    function exportCurrentReport() {
        exportToExcel();
    }

    // Export to JSON
    function exportToJson() {
        if (currentReportData.length === 0) {
            showToast('No data to export. Generate a report first.', 'error');
            return;
        }
        
        const reportType = document.getElementById('reportType').value;
        const filename = `${reportType}_report_${new Date().toISOString().split('T')[0]}.json`;
        
        const jsonData = JSON.stringify({
            reportType: reportType,
            generatedAt: new Date().toISOString(),
            totalRecords: currentReportData.length,
            data: currentReportData
        }, null, 2);
        
        const blob = new Blob([jsonData], { type: 'application/json' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', filename);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        showToast('JSON file exported successfully!');
    }

    // Print report
    function printReport() {
        if (currentReportData.length === 0) {
            showToast('No data to print. Generate a report first.', 'error');
            return;
        }
        
        window.print();
    }

    // Export comparison
    function exportComparison() {
        const content = document.getElementById('comparisonContent').innerHTML;
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>Configuration Comparison Report</title>
                    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
                </head>
                <body>
                    <div class="container mt-4">
                        <h2>Configuration Comparison Report</h2>
                        <p class="text-muted">Generated on ${new Date().toLocaleString()}</p>
                        ${content}
                    </div>
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }

    // Schedule report (placeholder)
    function scheduleReport() {
        showToast('Report scheduling feature coming soon!', 'info');
    }

    // Refresh all data
    async function refreshData() {
        showLoadingState();
        await Promise.all([
            loadSummaryStats(),
            loadConfigurations()
        ]);
        
        if (currentReportData.length > 0) {
            generateReport();
        } else {
            document.getElementById('reportContent').innerHTML = `
                <div class="text-center py-5">
                    <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Data refreshed successfully</h5>
                    <p class="text-muted">Select filters and click "Generate Report" to view analytics.</p>
                </div>
            `;
        }
    }

    // Chart variables
    let charts = {
        successRate: null,
        responseTime: null,
        riskLevel: null,
        performanceTimeline: null
    };

    // Load charts data and initialize charts
    async function loadChartsData() {
        try {
            // Fetch API test results for charts
            const resultsResp = await fetch('/api/results?pageSize=1000&page=1');
            if (!resultsResp.ok) {
                console.warn('No API results available for charts');
                initializeEmptyCharts();
                return;
            }
            
            const apiLogs = await resultsResp.json();
            console.log('Chart data loaded:', apiLogs.length, 'API logs');
            
            // Process data for charts
            const chartData = processChartData(apiLogs);
            
            // Initialize all charts
            initializeSuccessRateChart(chartData.successRate);
            initializeResponseTimeChart(chartData.responseTime);
            initializeRiskLevelChart(chartData.riskLevel);
            initializePerformanceTimelineChart(chartData.timeline);
            
        } catch (error) {
            console.error('Error loading charts data:', error);
            initializeEmptyCharts();
        }
    }

    // Process raw API logs into chart-ready data
    function processChartData(apiLogs) {
        // Success Rate Data
        const totalLogs = apiLogs.length;
        const successfulLogs = apiLogs.filter(log => log.isSuccessful).length;
        const failedLogs = totalLogs - successfulLogs;
        
        // Response Time Distribution
        const responseTimes = apiLogs.map(log => log.responseTimeMs || 0);
        const responseTimeBuckets = {
            '0-1000ms': responseTimes.filter(t => t >= 0 && t < 1000).length,
            '1-3s': responseTimes.filter(t => t >= 1000 && t < 3000).length,
            '3-5s': responseTimes.filter(t => t >= 3000 && t < 5000).length,
            '5-10s': responseTimes.filter(t => t >= 5000 && t < 10000).length,
            '10s+': responseTimes.filter(t => t >= 10000).length
        };
        
        // Risk Level Distribution (from request payloads)
        const riskCounts = { low: 0, medium: 0, high: 0, unknown: 0 };
        apiLogs.forEach(log => {
            try {
                const payload = JSON.parse(log.requestPayload || '{}');
                if (payload.messages && payload.messages[0] && payload.messages[0].content) {
                    const content = payload.messages[0].content;
                    const riskMatch = content.match(/Amount Risk Score: (\d+)/);
                    if (riskMatch) {
                        const score = parseInt(riskMatch[1]);
                        if (score <= 3) riskCounts.low++;
                        else if (score <= 6) riskCounts.medium++;
                        else riskCounts.high++;
                    } else {
                        riskCounts.unknown++;
                    }
                } else {
                    riskCounts.unknown++;
                }
            } catch (e) {
                riskCounts.unknown++;
            }
        });
        
        // Performance Timeline (hourly buckets for recent data)
        const timelineBuckets = {};
        const now = new Date();
        for (let i = 23; i >= 0; i--) {
            const hour = new Date(now.getTime() - (i * 60 * 60 * 1000));
            const key = hour.getHours().toString().padStart(2, '0') + ':00';
            timelineBuckets[key] = { successful: 0, failed: 0, avgResponse: 0 };
        }
        
        // Group logs by hour
        const hourlyGroups = {};
        apiLogs.forEach(log => {
            const logTime = new Date(log.requestTimestamp);
            const hourKey = logTime.getHours().toString().padStart(2, '0') + ':00';
            
            if (!hourlyGroups[hourKey]) {
                hourlyGroups[hourKey] = [];
            }
            hourlyGroups[hourKey].push(log);
        });
        
        // Calculate hourly statistics
        Object.keys(hourlyGroups).forEach(hour => {
            const logs = hourlyGroups[hour];
            const successful = logs.filter(l => l.isSuccessful).length;
            const failed = logs.length - successful;
            const avgResponse = logs.length > 0 ? 
                Math.round(logs.reduce((sum, l) => sum + (l.responseTimeMs || 0), 0) / logs.length) : 0;
                
            if (timelineBuckets[hour]) {
                timelineBuckets[hour] = { successful, failed, avgResponse };
            }
        });
        
        return {
            successRate: {
                successful: successfulLogs,
                failed: failedLogs
            },
            responseTime: responseTimeBuckets,
            riskLevel: riskCounts,
            timeline: timelineBuckets
        };
    }

    // Initialize Success Rate Chart
    function initializeSuccessRateChart(data) {
        const ctx = document.getElementById('successRateChart').getContext('2d');
        
        if (charts.successRate) {
            charts.successRate.destroy();
        }
        
        charts.successRate = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['Successful', 'Failed'],
                datasets: [{
                    data: [data.successful, data.failed],
                    backgroundColor: ['#28a745', '#dc3545'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                const total = data.successful + data.failed;
                                const percentage = total > 0 ? Math.round((context.parsed / total) * 100) : 0;
                                return `${context.label}: ${context.parsed} (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    // Initialize Response Time Chart
    function initializeResponseTimeChart(data) {
        const ctx = document.getElementById('responseTimeChart').getContext('2d');
        
        if (charts.responseTime) {
            charts.responseTime.destroy();
        }
        
        charts.responseTime = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Number of Requests',
                    data: Object.values(data),
                    backgroundColor: ['#007bff', '#17a2b8', '#ffc107', '#fd7e14', '#dc3545'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    }

    // Initialize Risk Level Chart
    function initializeRiskLevelChart(data) {
        const ctx = document.getElementById('riskLevelChart').getContext('2d');
        
        if (charts.riskLevel) {
            charts.riskLevel.destroy();
        }
        
        charts.riskLevel = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ['Low Risk', 'Medium Risk', 'High Risk', 'Unknown'],
                datasets: [{
                    data: [data.low, data.medium, data.high, data.unknown],
                    backgroundColor: ['#28a745', '#ffc107', '#dc3545', '#6c757d'],
                    borderWidth: 2,
                    borderColor: '#fff'
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // Initialize Performance Timeline Chart
    function initializePerformanceTimelineChart(data) {
        const ctx = document.getElementById('performanceTimelineChart').getContext('2d');
        
        if (charts.performanceTimeline) {
            charts.performanceTimeline.destroy();
        }
        
        const labels = Object.keys(data);
        const successData = labels.map(hour => data[hour].successful);
        const failedData = labels.map(hour => data[hour].failed);
        const responseData = labels.map(hour => data[hour].avgResponse);
        
        charts.performanceTimeline = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Successful Requests',
                        data: successData,
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        yAxisID: 'y'
                    },
                    {
                        label: 'Failed Requests',
                        data: failedData,
                        borderColor: '#dc3545',
                        backgroundColor: 'rgba(220, 53, 69, 0.1)',
                        yAxisID: 'y'
                    },
                    {
                        label: 'Avg Response Time (ms)',
                        data: responseData,
                        borderColor: '#ffc107',
                        backgroundColor: 'rgba(255, 193, 7, 0.1)',
                        type: 'line',
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    mode: 'index',
                    intersect: false,
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Hour'
                        }
                    },
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Request Count'
                        },
                        beginAtZero: true
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Response Time (ms)'
                        },
                        beginAtZero: true,
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                },
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // Initialize empty charts when no data is available
    function initializeEmptyCharts() {
        initializeSuccessRateChart({ successful: 0, failed: 0 });
        initializeResponseTimeChart({ '0-1000ms': 0, '1-3s': 0, '3-5s': 0, '5-10s': 0, '10s+': 0 });
        initializeRiskLevelChart({ low: 0, medium: 0, high: 0, unknown: 0 });
        
        // Create empty timeline data
        const emptyTimeline = {};
        const now = new Date();
        for (let i = 23; i >= 0; i--) {
            const hour = new Date(now.getTime() - (i * 60 * 60 * 1000));
            const key = hour.getHours().toString().padStart(2, '0') + ':00';
            emptyTimeline[key] = { successful: 0, failed: 0, avgResponse: 0 };
        }
        initializePerformanceTimelineChart(emptyTimeline);
    }

    // Refresh charts
    async function refreshCharts() {
        await loadChartsData();
        showToast('Charts refreshed successfully!');
    }

    // Export charts as images
    function exportCharts() {
        const timestamp = new Date().toISOString().split('T')[0];
        
        Object.keys(charts).forEach(chartName => {
            if (charts[chartName]) {
                const canvas = charts[chartName].canvas;
                const link = document.createElement('a');
                link.download = `${chartName}_chart_${timestamp}.png`;
                link.href = canvas.toDataURL();
                link.click();
            }
        });
        
        showToast('Charts exported successfully!');
    }

    // Show toast notification
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = 'alert alert-' + (type === 'success' ? 'success' : type === 'error' ? 'danger' : 'info') + ' position-fixed';
        toast.style.cssText = 'top: 80px; right: 20px; z-index: 9999; min-width: 250px;';
        const iconClass = type === 'success' ? 'check' : type === 'error' ? 'exclamation-triangle' : 'info-circle';
        toast.innerHTML = '<i class="fas fa-' + iconClass + ' me-1"></i>' + message;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            toast.remove();
        }, 4000);
    }

    // ===== LIVE DATA FUNCTIONALITY =====
    let liveDataConnection;
    let liveDataEnabled = false;
    
    // Initialize live data connection
    async function initializeLiveData() {
        try {
            // Import SignalR from CDN
            if (typeof signalR === 'undefined') {
                await loadSignalRLibrary();
            }
            
            liveDataConnection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/apitest')
                .withAutomaticReconnect()
                .build();
                
            // Listen for live data updates
            liveDataConnection.on('LiveDataUpdate', handleLiveDataUpdate);
            
            // Handle connection events
            liveDataConnection.onclose(function () {
                updateLiveDataStatus('Disconnected', 'danger');
                console.log('Live data connection closed');
            });
            
            liveDataConnection.onreconnecting(function () {
                updateLiveDataStatus('Reconnecting...', 'warning');
                console.log('Live data connection reconnecting');
            });
            
            liveDataConnection.onreconnected(function () {
                updateLiveDataStatus('Connected', 'success');
                console.log('Live data connection restored');
            });
            
            // Start the connection
            await liveDataConnection.start();
            liveDataEnabled = true;
            updateLiveDataStatus('Connected', 'success');
            showLiveDataCard();
            
            console.log('Live data connection established');
            
        } catch (error) {
            console.error('Failed to initialize live data connection:', error);
            updateLiveDataStatus('Error', 'danger');
        }
    }
    
    // Load SignalR library dynamically
    function loadSignalRLibrary() {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
           <script src="~/lib/@("@microsoft")/signalr/dist/browser/signalr.js"></script>
            script.onload = resolve;
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }
    
    // Handle live data updates from SignalR
    function handleLiveDataUpdate(data) {
        if (!liveDataEnabled) return;
        
        try {
            const stats = data.statistics;
            const systemStatus = data.systemStatus;
            
            // Update live metrics
            updateLiveMetrics(stats, systemStatus);
            
            // Update recent activity
            updateRecentActivity(stats.recentActivity);
            
            // Update last update timestamp
            document.getElementById('lastUpdate').textContent = 
                'Last update: ' + new Date(data.timestamp).toLocaleTimeString();
            
        } catch (error) {
            console.error('Error processing live data update:', error);
        }
    }
    
    // Update live metrics display
    function updateLiveMetrics(stats, systemStatus) {
        const overview = stats.overview;
        
        // Requests per hour
        document.getElementById('liveRequestsPerHour').textContent = 
            overview.lastHourRequests || 0;
        
        // Success rate (last 24 hours)
        const successRate24h = stats.trends?.successRateLast24h || overview.successRate || 0;
        document.getElementById('liveSuccessRate').textContent = 
            Math.round(successRate24h) + '%';
        
        // Average response time
        document.getElementById('liveAvgResponse').textContent = 
            Math.round(overview.avgResponseTime || 0) + 'ms';
        
        // System memory usage (convert bytes to MB)
        const memoryMB = systemStatus?.memoryUsage ? 
            Math.round(systemStatus.memoryUsage / 1024 / 1024) : 0;
        document.getElementById('systemMemory').textContent = memoryMB + ' MB';
    }
    
    // Update recent activity stream
    function updateRecentActivity(activities) {
        const container = document.getElementById('recentActivity');
        const countElement = document.getElementById('activityCount');
        
        if (!activities || activities.length === 0) {
            container.innerHTML = '<div class="text-center text-muted py-3"><small>No recent activity</small></div>';
            countElement.textContent = '0';
            return;
        }
        
        countElement.textContent = activities.length.toString();
        
        const html = activities.map(activity => {
            const time = new Date(activity.requestTimestamp).toLocaleTimeString();
            const statusClass = activity.isSuccessful ? 'success' : 'danger';
            const statusIcon = activity.isSuccessful ? 'check' : 'times';
            
            return `
                <div class="d-flex align-items-center py-2 border-bottom border-light">
                    <div class="me-3">
                        <i class="fas fa-${statusIcon} text-${statusClass}"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="fw-medium">${activity.configurationName || 'API Test'}</small>
                            <small class="text-muted">${time}</small>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">Status: ${activity.statusCode}</small>
                            <small class="text-muted">${activity.responseTimeMs}ms</small>
                        </div>
                    </div>
                </div>
            `;
        }).join('');
        
        container.innerHTML = html;
    }
    
    // Show/hide live data card
    function showLiveDataCard() {
        document.getElementById('liveDataCard').style.display = 'block';
    }
    
    function hideLiveDataCard() {
        document.getElementById('liveDataCard').style.display = 'none';
    }
    
    // Update live data connection status
    function updateLiveDataStatus(status, type) {
        const statusElement = document.getElementById('liveDataStatus');
        statusElement.textContent = status;
        statusElement.className = `badge bg-${type === 'success' ? 'light' : type} text-${type === 'success' ? 'success' : 'white'} ms-2`;
    }
    
    // Toggle live data on/off
    function toggleLiveData() {
        liveDataEnabled = !liveDataEnabled;
        const btn = document.getElementById('liveToggleBtn');
        
        if (liveDataEnabled) {
            btn.innerHTML = '<i class="fas fa-pause me-1"></i> Pause';
            btn.className = 'btn btn-sm btn-outline-light';
            updateLiveDataStatus('Connected', 'success');
        } else {
            btn.innerHTML = '<i class="fas fa-play me-1"></i> Resume';
            btn.className = 'btn btn-sm btn-light';
            updateLiveDataStatus('Paused', 'warning');
        }
    }
    
    // Initialize live data on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Try to initialize live data connection
        setTimeout(() => {
            initializeLiveData();
        }, 2000); // Wait 2 seconds to ensure other scripts are loaded
    });
</script>
}
