using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using FraudDetectorWebApp.Attributes;
using FraudDetectorWebApp.Services;
using FraudDetectorWebApp.DTOs;
using System.ServiceProcess;
using System.Security.Claims;
using System.Diagnostics;
using Microsoft.Win32;

namespace FraudDetectorWebApp.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    [RequireServiceManagement]
    public class ServiceManagementController : ControllerBase
    {
        private readonly IPermissionService _permissionService;
        private readonly ILogger<ServiceManagementController> _logger;
        private readonly DataRetentionService _retentionService;
        private readonly AutoScenarioGenerationService _generationService;

        public ServiceManagementController(IPermissionService permissionService,
            ILogger<ServiceManagementController> logger,
            DataRetentionService retentionService,
            AutoScenarioGenerationService generationService)
        {
            _permissionService = permissionService;
            _logger = logger;
            _retentionService = retentionService;
            _generationService = generationService;
        }

        [HttpGet("status")]
        public async Task<ActionResult<object>> GetServicesStatus()
        {
            try
            {
                var retentionStatus = await _retentionService.GetRetentionStatus();
                var generationStatus = await _generationService.GetStatus();

                return Ok(new
                {
                    retentionService = new
                    {
                        name = "Data Retention Service",
                        status = "Running",
                        lastCleanupAt = retentionStatus.LastCleanupAt,
                        nextCleanupAt = retentionStatus.NextCleanupAt,
                        retentionPolicies = retentionStatus.RetentionPolicies.ToDictionary(
                            kvp => kvp.Key, 
                            kvp => $"{kvp.Value.TotalDays} days"),
                        pendingDeletionCounts = retentionStatus.PendingDeletionCounts,
                        eligibleForPermanentDeletion = retentionStatus.EligibleForPermanentDeletion
                    },
                    autoGenerationService = new
                    {
                        name = "Auto Scenario Generation Service",
                        status = "Running", 
                        nextGenerationAt = generationStatus.NextGenerationAt,
                        generationInterval = $"{generationStatus.GenerationInterval.TotalHours} hours",
                        currentBetaScenarios = generationStatus.CurrentBetaScenarios,
                        currentRegularScenarios = generationStatus.CurrentRegularScenarios,
                        recentAutoGenerated = generationStatus.RecentAutoGenerated,
                        limits = new
                        {
                            maxScenariosPerSession = generationStatus.MaxScenariosPerSession,
                            maxTotalActiveScenarios = generationStatus.MaxTotalActiveScenarios
                        }
                    },
                    systemInfo = new
                    {
                        serverTime = DateTime.UtcNow,
                        environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production",
                        machineName = Environment.MachineName
                    }
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting services status");
                return StatusCode(500, new { message = "Error getting services status", error = ex.Message });
            }
        }

        [HttpGet("retention/status")]
        public async Task<ActionResult<RetentionStatusDto>> GetRetentionStatus()
        {
            try
            {
                var status = await _retentionService.GetRetentionStatus();
                return Ok(status);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting retention service status");
                return StatusCode(500, new { message = "Error getting retention service status", error = ex.Message });
            }
        }

        [HttpPost("retention/force-cleanup")]
        public async Task<ActionResult<object>> ForceRetentionCleanup()
        {
            try
            {
                _logger.LogInformation("Force retention cleanup requested via API");
                
                await _retentionService.ForceCleanup();
                
                return Ok(new 
                { 
                    message = "Force retention cleanup initiated successfully",
                    timestamp = DateTime.UtcNow 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during force retention cleanup");
                return StatusCode(500, new { message = "Error during force retention cleanup", error = ex.Message });
            }
        }

        [HttpGet("generation/status")]
        public async Task<ActionResult<AutoGenerationStatusDto>> GetGenerationStatus()
        {
            try
            {
                var status = await _generationService.GetStatus();
                return Ok(status);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting auto generation service status");
                return StatusCode(500, new { message = "Error getting auto generation service status", error = ex.Message });
            }
        }

        [HttpPost("generation/force-generate")]
        public async Task<ActionResult<object>> ForceScenarioGeneration()
        {
            try
            {
                _logger.LogInformation("Force scenario generation requested via API");
                
                await _generationService.ForceGeneration();
                
                return Ok(new 
                { 
                    message = "Force scenario generation initiated successfully",
                    timestamp = DateTime.UtcNow 
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during force scenario generation");
                return StatusCode(500, new { message = "Error during force scenario generation", error = ex.Message });
            }
        }

        [HttpGet("health")]
        public ActionResult<object> GetHealthCheck()
        {
            try
            {
                var healthInfo = new
                {
                    status = "Healthy",
                    timestamp = DateTime.UtcNow,
                    services = new
                    {
                        retentionService = "Running",
                        autoGenerationService = "Running"
                    },
                    system = new
                    {
                        environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production",
                        machineName = Environment.MachineName,
                        processId = Environment.ProcessId,
                        workingSet = GC.GetTotalMemory(false),
                        uptime = DateTime.UtcNow - Process.GetCurrentProcess().StartTime.ToUniversalTime()
                    }
                };

                return Ok(healthInfo);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during health check");
                return StatusCode(500, new 
                { 
                    status = "Unhealthy", 
                    message = "Error during health check", 
                    error = ex.Message,
                    timestamp = DateTime.UtcNow 
                });
            }
        }

        [HttpGet("logs/recent")]
        public ActionResult<object> GetRecentServiceLogs([FromQuery] int hours = 24, [FromQuery] int maxEntries = 100)
        {
            try
            {
                // This is a simplified implementation
                // In a real application, you would implement proper log aggregation
                var logs = new
                {
                    message = "Recent service logs feature not fully implemented",
                    note = "This would require integration with a logging provider like Serilog, NLog, or structured logging",
                    suggestion = "Check application logs directly or implement log aggregation service",
                    timeRange = $"Last {hours} hours",
                    maxEntries = maxEntries,
                    timestamp = DateTime.UtcNow
                };

                return Ok(logs);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error getting recent service logs");
                return StatusCode(500, new { message = "Error getting recent service logs", error = ex.Message });
            }
        }

        [HttpPost("maintenance/enable")]
        public ActionResult<object> EnableMaintenanceMode()
        {
            try
            {
                // This is a placeholder for maintenance mode functionality
                // In a real implementation, you would set a flag that other parts of the application check
                
                _logger.LogInformation("Maintenance mode enabled via API");
                
                return Ok(new
                {
                    message = "Maintenance mode enabled",
                    note = "This is a placeholder implementation. In production, this would disable certain services and show maintenance messages",
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error enabling maintenance mode");
                return StatusCode(500, new { message = "Error enabling maintenance mode", error = ex.Message });
            }
        }

        [HttpPost("maintenance/disable")]
        public ActionResult<object> DisableMaintenanceMode()
        {
            try
            {
                _logger.LogInformation("Maintenance mode disabled via API");
                
                return Ok(new
                {
                    message = "Maintenance mode disabled",
                    note = "This is a placeholder implementation. In production, this would re-enable services",
                    timestamp = DateTime.UtcNow
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error disabling maintenance mode");
                return StatusCode(500, new { message = "Error disabling maintenance mode", error = ex.Message });
            }
        }
    }
}
